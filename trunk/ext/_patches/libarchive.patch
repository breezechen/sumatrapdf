diff -rPu5 libarchive.orig\archive.h libarchive\archive.h
--- libarchive.orig\archive.h	Thu Jun 12 15:33:23 2014
+++ libarchive\archive.h	Sun Jun 15 03:23:48 2014
@@ -449,10 +449,14 @@
 __LA_DECL int archive_read_open_fd(struct archive *, int _fd,
 		     size_t _block_size);
 /* Read an archive that's already open, using a FILE *. */
 /* Note: DO NOT use this with tape drives. */
 __LA_DECL int archive_read_open_FILE(struct archive *, FILE *_file);
+/* SumatraPDF: Read an archive from a Win32 IStream. */
+#ifdef _WIN32
+__LA_DECL int archive_read_open_istream(struct archive *, IStream *, ULONG);
+#endif
 
 /* Parses and returns next entry header. */
 __LA_DECL int archive_read_next_header(struct archive *,
 		     struct archive_entry **);
 
@@ -470,10 +474,13 @@
 __LA_DECL __LA_SSIZE_T		 archive_read_data(struct archive *,
 				    void *, size_t);
 
 /* Seek within the body of an entry.  Similar to lseek(2). */
 __LA_DECL __LA_INT64_T archive_seek_data(struct archive *, __LA_INT64_T, int);
+
+/* SumatraPDF: seek freely within the file (to header offsets) */
+__LA_DECL __LA_INT64_T archive_read_seek(struct archive *, __LA_INT64_T, int);
 
 /*
  * A zero-copy version of archive_read_data that also exposes the file offset
  * of each returned block.  Note that the client has no way to specify
  * the desired size of the block.  The API does guarantee that offsets will
diff -rPu5 libarchive.orig\archive_read.c libarchive\archive_read.c
--- libarchive.orig\archive_read.c	Thu Jun 12 15:33:22 2014
+++ libarchive\archive_read.c	Sun Jun 15 04:22:37 2014
@@ -192,11 +192,12 @@
 			int64_t get, ask = request;
 			if (ask > skip_limit)
 				ask = skip_limit;
 			get = (self->archive->client.skipper)
 				(&self->archive->archive, self->data, ask);
-			if (get == 0)
+			/* SumatraPDF: handle errors (prevent infinite loop) */
+			if (get <= 0)
 				return (total);
 			request -= get;
 			total += get;
 		}
 	} else if (self->archive->client.seeker != NULL
@@ -452,11 +453,11 @@
 int
 archive_read_open1(struct archive *_a)
 {
 	struct archive_read *a = (struct archive_read *)_a;
 	struct archive_read_filter *filter, *tmp;
-	int slot, e;
+	int slot, e = 0;
 	unsigned int i;
 
 	archive_check_magic(_a, ARCHIVE_READ_MAGIC, ARCHIVE_STATE_NEW,
 	    "archive_read_open");
 	archive_clear_error(&a->archive);
@@ -877,10 +878,21 @@
 		    "No format_seek_data_block function registered");
 		return (ARCHIVE_FATAL);
 	}
 
 	return (a->format->seek_data)(a, offset, whence);
+}
+
+/* SumatraPDF: seek freely within the file (to header offsets) */
+int64_t
+archive_read_seek(struct archive *_a, int64_t offset, int whence)
+{
+	struct archive_read *a = (struct archive_read *)_a;
+	archive_check_magic(_a, ARCHIVE_READ_MAGIC, ARCHIVE_STATE_ANY,
+	    "archive_read_seek");
+	_a->state = ARCHIVE_STATE_HEADER;
+	return __archive_read_seek(a, offset, whence);
 }
 
 /*
  * Read the next block of entry data from the archive.
  * This is a zero-copy interface; the client receives a pointer,
diff -rPu5 libarchive.orig\archive_read_open_istream.c libarchive\archive_read_open_istream.c
--- libarchive.orig\archive_read_open_istream.c	Thu Jan 01 01:00:00 1970
+++ libarchive\archive_read_open_istream.c	Sun Jun 15 04:43:18 2014
@@ -0,0 +1,106 @@
+/* Copyright 2014 the SumatraPDF project authors (see AUTHORS file).
+   License: Simplified BSD (see COPYING.BSD) */
+
+#ifndef _WIN32
+#error archive_read_open_istream is only supported for Win32
+#endif
+#define COBJMACROS
+
+#include "archive_platform.h"
+
+#include "archive.h"
+#include "archive_private.h"
+
+struct read_istream_data {
+	IStream	*stream;
+	ULONG	 block_size;
+	char	 buffer[1];
+};
+
+static ssize_t
+istream_read(struct archive *a, void *client_data, const void **buff)
+{
+	struct read_istream_data *mine = client_data;
+	ULONG cbRead = mine->block_size;
+	HRESULT res;
+
+	res = IStream_Read(mine->stream, mine->buffer, mine->block_size, &cbRead);
+	if (FAILED(res)) {
+		archive_set_error(a, EIO, "IStream read error: %x", res);
+		return -1;
+	}
+
+	*buff = mine->buffer;
+	return cbRead;
+}
+
+static int64_t
+istream_seek(struct archive *a, void *client_data, int64_t request, int whence)
+{
+	struct read_istream_data *mine = client_data;
+	LARGE_INTEGER off;
+	ULARGE_INTEGER n;
+	HRESULT res;
+
+	off.QuadPart = request;
+	res = IStream_Seek(mine->stream, off, whence, &n);
+	if (FAILED(res)) {
+		archive_set_error(a, EIO, "IStream seek error: %x", res);
+		return ARCHIVE_FAILED;
+	}
+
+	return n.QuadPart;
+}
+
+static int64_t
+istream_skip(struct archive *a, void *client_data, int64_t request)
+{
+	int64_t r = istream_seek(a, client_data, request, SEEK_CUR);
+	return r >= 0 ? request : r;
+}
+
+static int
+istream_close(struct archive *a, void *client_data)
+{
+	struct read_istream_data *mine = client_data;
+
+	IUnknown_Release(mine->stream);
+	free(mine);
+
+	return ARCHIVE_OK;
+}
+
+int
+archive_read_open_istream(struct archive *a, IStream *stream, ULONG block_size)
+{
+	struct read_istream_data *mine;
+	LARGE_INTEGER zero = { 0 };
+	HRESULT res;
+
+	res = IStream_Seek(stream, zero, STREAM_SEEK_SET, NULL);
+	if (FAILED(res)) {
+		archive_set_error(a, EINVAL, "IStream isn't seekable");
+		return ARCHIVE_FATAL;
+	}
+
+	mine = calloc(1, sizeof(*mine) + block_size);
+	if (!mine) {
+		archive_set_error(a, ENOMEM, "No memory");
+		return ARCHIVE_FATAL;
+	}
+
+	mine->block_size = block_size;
+	mine->stream = stream;
+	IUnknown_AddRef(stream);
+
+	if (archive_read_append_callback_data(a, mine) != ARCHIVE_OK) {
+		istream_close(a, mine);
+		return ARCHIVE_FATAL;
+	}
+	archive_read_set_read_callback(a, istream_read);
+	archive_read_set_seek_callback(a, istream_seek);
+	archive_read_set_skip_callback(a, istream_skip);
+	archive_read_set_close_callback(a, istream_close);
+
+	return archive_read_open1(a);
+}
diff -rPu5 libarchive.orig\archive_read_support_format_rar.c libarchive\archive_read_support_format_rar.c
--- libarchive.orig\archive_read_support_format_rar.c	Thu Jun 12 15:33:23 2014
+++ libarchive\archive_read_support_format_rar.c	Thu Jun 12 15:36:40 2014
@@ -223,10 +223,11 @@
   time_t mtime;
   long mnsec;
   mode_t mode;
   char *filename;
   char *filename_save;
+  size_t filename_save_size;
   size_t filename_allocated;
 
   /* File header optional entries */
   char salt[8];
   time_t atime;
@@ -1290,11 +1291,14 @@
 
   if (rar->file_flags & FHD_PASSWORD)
   {
     archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                       "RAR encryption support unavailable.");
-    return (ARCHIVE_FATAL);
+    /* Since it is only the data part itself that is encrypted we can at least
+       extract information about the currently processed entry and don't need
+       to return ARCHIVE_FATAL here. */
+    /*return (ARCHIVE_FATAL);*/
   }
 
   if (rar->file_flags & FHD_LARGE)
   {
     memcpy(packed_size, file_header.pack_size, 4);
@@ -1467,10 +1471,11 @@
     p += filename_size;
   }
 
   /* Split file in multivolume RAR. No more need to process header. */
   if (rar->filename_save &&
+    filename_size == rar->filename_save_size &&
     !memcmp(rar->filename, rar->filename_save, filename_size + 1))
   {
     __archive_read_consume(a, header_size - 7);
     rar->cursor++;
     if (rar->cursor >= rar->nodes)
@@ -1496,10 +1501,11 @@
   }
 
   rar->filename_save = (char*)realloc(rar->filename_save,
                                       filename_size + 1);
   memcpy(rar->filename_save, rar->filename, filename_size + 1);
+  rar->filename_save_size = filename_size;
 
   /* Set info for seeking */
   free(rar->dbo);
   if ((rar->dbo = calloc(1, sizeof(*rar->dbo))) == NULL)
   {
diff -rPu5 libarchive.orig\archive_string.c libarchive\archive_string.c
--- libarchive.orig\archive_string.c	Thu Jun 12 15:33:21 2014
+++ libarchive\archive_string.c	Thu Jun 12 16:00:40 2014
@@ -3020,10 +3020,11 @@
 			uint32_t ucx[FDC_MAX];
 			int ccx[FDC_MAX];
 			int cl, cx, i, nx, ucx_size;
 			int LIndex,SIndex;
 			uint32_t nfc;
+			nx = 0;
 
 			if (n2 == spair || always_replace)
 				/* uc2 is converted from a surrogate pair.
 			 	 * this should be treated as a changed code. */
 				uc2ptr = NULL;
diff -rPu5 libarchive.orig\config_win32.h libarchive\config_win32.h
--- libarchive.orig\config_win32.h	Thu Jan 01 01:00:00 1970
+++ libarchive\config_win32.h	Thu Jun 12 15:52:03 2014
@@ -0,0 +1,92 @@
+#ifndef Config_Win32_h
+#define Config_Win32_h
+
+#ifdef _WIN64
+#define ssize_t __int64
+#else
+#define ssize_t long
+#endif
+#define pid_t int
+#define uid_t unsigned int
+#define gid_t unsigned int
+// cf. archive_entry.h
+#define mode_t unsigned short
+
+#define ARCHIVE_CRYPTO_MD5_WIN
+#define ARCHIVE_CRYPTO_SHA1_WIN
+/* TODO: only on Vista and above
+#define ARCHIVE_CRYPTO_SHA256_WIN
+#define ARCHIVE_CRYPTO_SHA384_WIN
+#define ARCHIVE_CRYPTO_SHA512_WIN
+*/
+
+#define HAVE_BZLIB_H 1
+#define HAVE_CTYPE_H 1
+#define HAVE_DECL_INT64_MAX 1
+#define HAVE_DECL_INT64_MIN 1
+#define HAVE_DECL_SIZE_MAX 1
+#define HAVE_DECL_UINT32_MAX 1
+#define HAVE_DECL_UINT64_MAX 1
+
+#define HAVE_ERRNO_H 1
+#define HAVE_FCNTL 1
+#define HAVE_FCNTL_H 1
+
+#define HAVE_INTTYPES_H 1
+#define HAVE_IO_H 1
+
+#define HAVE_LIBBZ2 1
+#define HAVE_LIBLZMADEC 1
+
+#define HAVE_LIMITS_H 1
+#define HAVE_LOCALE_H 1
+
+#define HAVE_LZMADEC_H 1
+
+#define HAVE_MEMMOVE 1
+#define HAVE_MEMSET 1
+#define HAVE_MKDIR 1
+
+#undef HAVE_SETENV
+#undef HAVE_SETLOCALE
+
+#define HAVE_STDARG_H 1
+#define HAVE_STDINT_H 1
+#define HAVE_STDLIB_H 1
+#define HAVE_STRCHR 1
+#define HAVE_STRDUP 1
+#define HAVE_STRFTIME 1
+#define HAVE_STRINGS_H 1
+#define HAVE_STRING_H 1
+#define HAVE_STRNCPY_S 1
+#define HAVE_STRRCHR 1
+#define HAVE_TIME_H 1
+
+#define HAVE_VPRINTF 1
+#define HAVE_WCHAR_H 1
+#define HAVE_WCHAR_T 1
+#define HAVE_WCRTOMB 1
+#define HAVE_WCSCMP 1
+#define HAVE_WCSCPY 1
+#define HAVE_WCSLEN 1
+#define HAVE_WCTOMB 1
+#define HAVE_WCTYPE_H 1
+
+#define HAVE_WINCRYPT_H 1
+#define HAVE_WINDOWS_H 1
+#define HAVE_WINIOCTL_H 1
+#define HAVE_WMEMCMP 1
+#define HAVE_WMEMCPY 1
+
+#define HAVE_ZLIB_H 1
+
+#define HAVE__CTIME64_S 1
+#define HAVE__FSEEKI64 1
+#define HAVE__GET_TIMEZONE 1
+#define HAVE__LOCALTIME64_S 1
+
+#define STDC_HEADERS 1
+
+#define _WIN32_WINNT 0x0500
+
+#endif
